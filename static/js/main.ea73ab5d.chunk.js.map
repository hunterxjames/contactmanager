{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/Header.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/pages/About.js","components/pages/NotFound.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","Axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onShowClick","onDeleteClick","a","console","log","delete","name","email","phone","className","onClick","style","cursor","float","color","bind","to","marginRight","Contacts","Fragment","key","Header","branding","href","defaultProps","TextInputGroup","label","placeholder","error","onChange","htmlFor","classnames","AddContact","errors","onSubmit","e","preventDefault","post","history","push","target","EditContact","updContact","match","params","put","Test","title","body","fetch","then","response","json","App","exact","path","component","About","NotFound","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ea73ab5d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Axios from \"axios\";\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"DELETE_CONTACT\":\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(\r\n                    (contact) => contact.id !== action.payload\r\n                ),\r\n            };\r\n        case \"ADD_CONTACT\":\r\n            return {\r\n                ...state,\r\n                contacts: [action.payload, ...state.contacts],\r\n            };\r\n        case \"UPDATE_CONTACT\":\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map((contact) =>\r\n                    contact.id === action.payload.id\r\n                        ? (contact = action.payload)\r\n                        : contact\r\n                ),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// /Used for sharing states across components\r\nexport class Provider extends Component {\r\n    state = {\r\n        contacts: [],\r\n        dispatch: (action) => {\r\n            this.setState((state) => reducer(state, action));\r\n        },\r\n    };\r\n\r\n    //synchronous\r\n    // componentDidMount() {\r\n    //     Axios.get(\"https://jsonplaceholder.typicode.com/users\").then((res) =>\r\n    //         this.setState({ contacts: res.data })\r\n    //     );\r\n    // }\r\n\r\n    //asynchronous\r\n    async componentDidMount() {\r\n        const res = await Axios.get(\r\n            \"https://jsonplaceholder.typicode.com/users\"\r\n        );\r\n\r\n        this.setState({ contacts: res.data });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n","import React, { Component } from \"react\";\r\n// import PropTypes from \"prop-types\";\r\n// import css file\r\n// import './Contact.css';\r\nimport { Consumer } from \"../../context\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Axios from \"axios\";\r\n\r\nclass Contact extends Component {\r\n    //state is a special variable to store component's state\r\n    state = { showContactInfo: false };\r\n\r\n    //propTypes is used for validation in React\r\n    //This can also be added outside of the class below; as Contact.propTypes\r\n    // static propTypes = {\r\n    // contact: PropTypes.object.isRequired,\r\n    // deleteClickHandler: PropTypes.func.isRequired,\r\n    // email: PropTypes.string.isRequired,\r\n    // phone: PropTypes.string.isRequired,\r\n    // };\r\n\r\n    //trick to workaround closure like this.showOnClick.bind(this)\r\n    onShowClick = () => {\r\n        //Use setState to change component state\r\n        this.setState({ showContactInfo: !this.state.showContactInfo });\r\n    };\r\n\r\n    //synchronous\r\n    // onDeleteClick = (id, dispatch) => {\r\n    //     console.log(\"delete clicked\");\r\n    //     Axios.delete(\r\n    //         `https://jsonplaceholder.typicode.com/users/${id}`\r\n    //     ).then((res) => dispatch({ type: \"DELETE_CONTACT\", payload: id }));\r\n    // };\r\n\r\n    onDeleteClick = async (id, dispatch) => {\r\n        console.log(\"delete clicked\");\r\n        await Axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\n        dispatch({ type: \"DELETE_CONTACT\", payload: id });\r\n    };\r\n\r\n    render() {\r\n        //Desctructuring\r\n        const { id, name, email, phone } = this.props.contact;\r\n        const { showContactInfo } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {(value) => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card card-body mb-3\">\r\n                            <h4>\r\n                                {name}{\" \"}\r\n                                <i\r\n                                    onClick={() =>\r\n                                        this.setState({\r\n                                            showContactInfo: !this.state\r\n                                                .showContactInfo,\r\n                                        })\r\n                                    }\r\n                                    className=\"fas fa-sort-down\"\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                ></i>\r\n                                <i\r\n                                    className=\"fas fa-times\"\r\n                                    style={{\r\n                                        cursor: \"pointer\",\r\n                                        float: \"right\",\r\n                                        color: \"red\",\r\n                                    }}\r\n                                    onClick={this.onDeleteClick.bind(\r\n                                        this,\r\n                                        id,\r\n                                        dispatch\r\n                                    )}\r\n                                ></i>\r\n                                <Link to={`/contact/edit/${id}`}>\r\n                                    <i\r\n                                        className=\"fas fa-pencil-alt\"\r\n                                        style={{\r\n                                            cursor: \"pointer\",\r\n                                            float: \"right\",\r\n                                            color: \"black\",\r\n                                            marginRight: \"1rem\",\r\n                                        }}\r\n                                    ></i>\r\n                                </Link>\r\n                            </h4>\r\n                            {showContactInfo ? (\r\n                                <ul className=\"list-group\">\r\n                                    <li className=\"list-group-item\">\r\n                                        Email: {email}\r\n                                    </li>\r\n                                    <li className=\"list-group-item\">\r\n                                        Phone: {phone}\r\n                                    </li>\r\n                                </ul>\r\n                            ) : null}\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\n// Contact.propTypes = {\r\n// name: PropTypes.string.isRequired,\r\n// email: PropTypes.string.isRequired,\r\n// phone: PropTypes.string.isRequired,\r\n// };\r\n\r\nexport default Contact;\r\n","import React, { Component } from \"react\";\r\nimport Contact from \"./Contact\";\r\nimport { Consumer } from \"../../context\";\r\n\r\nclass Contacts extends Component {\r\n    render() {\r\n        return (\r\n            <Consumer>\r\n                {(value) => {\r\n                    const { contacts } = value;\r\n                    return (\r\n                        <React.Fragment>\r\n                            <h1 className=\"display-4 mb-2\">\r\n                                <span className=\"text-danger\">Contact</span>{\" \"}\r\n                                List\r\n                            </h1>\r\n                            {contacts.map((contact) => (\r\n                                <Contact key={contact.id} contact={contact} />\r\n                            ))}\r\n                        </React.Fragment>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contacts;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    const { branding } = props;\r\n    return (\r\n        <nav\r\n            className=\"navbar navbar-expand-sm \r\n        navbar-dark \r\n        bg-danger mb-3 py-0\"\r\n        >\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">\r\n                    {branding}\r\n                </a>\r\n                <div>\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\">\r\n                                <i className=\"fas fa-home\">Home</i>\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/contact/add\" className=\"nav-link\">\r\n                                <i className=\"fas fa-plus\">Add</i>\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about\" className=\"nav-link\">\r\n                                <i className=\"fas fa-question\">About</i>\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\n//default properties\r\nHeader.defaultProps = {\r\n    branding: \"My App\",\r\n};\r\n\r\n//Validation\r\nHeader.propTypes = {\r\n    //making sure that branding is string\r\n    branding: PropTypes.string.isRequired,\r\n};\r\n\r\n// const headingStyle = {\r\n//      color: 'Green'\r\n// }\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classnames from \"classnames\";\r\n\r\nconst TextInputGroup = ({\r\n    label,\r\n    name,\r\n    value,\r\n    placeholder,\r\n    type,\r\n    error,\r\n    onChange,\r\n}) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <input\r\n                type={type}\r\n                name={name}\r\n                className={classnames(\"form-control form-control-lg\", {\r\n                    \"is-invalid\": error,\r\n                })}\r\n                value={value}\r\n                placeholder={placeholder}\r\n                onChange={onChange}\r\n            />\r\n            {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    error: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nTextInputGroup.defaultProps = {\r\n    type: \"text\",\r\n};\r\n\r\nexport default TextInputGroup;\r\n","import React, { Component } from \"react\";\r\nimport { Consumer } from \"../../context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\nimport Axios from \"axios\";\r\n\r\nclass AddContact extends Component {\r\n    state = {\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        errors: {},\r\n    };\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        const { name, email, phone } = this.state;\r\n        e.preventDefault();\r\n\r\n        //Validation\r\n        if (name === \"\") {\r\n            this.setState({ errors: { name: \"Name is required\" } });\r\n            return;\r\n        }\r\n        if (email === \"\") {\r\n            this.setState({ errors: { email: \"Email is required\" } });\r\n            return;\r\n        }\r\n        if (phone === \"\") {\r\n            this.setState({ errors: { phone: \"Phone is required\" } });\r\n            return;\r\n        }\r\n        const contact = {\r\n            name,\r\n            email,\r\n            phone,\r\n        };\r\n        console.log(this.contact);\r\n        const res = await Axios.post(\r\n            `https://jsonplaceholder.typicode.com/users/`,\r\n            contact\r\n        );\r\n\r\n        dispatch({ type: \"ADD_CONTACT\", payload: res.data });\r\n\r\n        this.setState({\r\n            name: \"\",\r\n            email: \"\",\r\n            phone: \"\",\r\n            errors: {},\r\n        });\r\n\r\n        this.props.history.push(\"/\");\r\n    };\r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n        return (\r\n            <Consumer>\r\n                {(value) => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">Add Contact</div>\r\n                            <div className=\"card-body\">\r\n                                <form\r\n                                    onSubmit={this.onSubmit.bind(\r\n                                        this,\r\n                                        dispatch\r\n                                    )}\r\n                                >\r\n                                    <TextInputGroup\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        value={name}\r\n                                        placeholder=\"Enter name...\"\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        type=\"email\"\r\n                                        label=\"Email\"\r\n                                        name=\"email\"\r\n                                        value={email}\r\n                                        placeholder=\"Enter email...\"\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        className=\"form-control form-control-lg\"\r\n                                        value={phone}\r\n                                        placeholder=\"Enter phone...\"\r\n                                        onChange={this.onChange}\r\n                                        error={errors.phone}\r\n                                    />\r\n                                    <input\r\n                                        type=\"submit\"\r\n                                        value=\"Add Contact\"\r\n                                        className=\"btn btn-light btn-block\"\r\n                                    />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddContact;\r\n","import React, { Component } from \"react\";\r\nimport { Consumer } from \"../../context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\nimport Axios from \"axios\";\r\n\r\nclass EditContact extends Component {\r\n    state = {\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        errors: {},\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const { id } = this.props.match.params;\r\n        const res = await Axios.get(\r\n            `https://jsonplaceholder.typicode.com/users/${id}`\r\n        );\r\n        const contact = res.data;\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone,\r\n            id: contact.id,\r\n        });\r\n    }\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        const { name, email, phone } = this.state;\r\n        e.preventDefault();\r\n\r\n        //Validation\r\n        if (name === \"\") {\r\n            this.setState({ errors: { name: \"Name is required\" } });\r\n            return;\r\n        }\r\n        if (email === \"\") {\r\n            this.setState({ errors: { email: \"Email is required\" } });\r\n            return;\r\n        }\r\n        if (phone === \"\") {\r\n            this.setState({ errors: { phone: \"Phone is required\" } });\r\n            return;\r\n        }\r\n\r\n        const updContact = {\r\n            name,\r\n            email,\r\n            phone,\r\n        };\r\n\r\n        const { id } = this.props.match.params;\r\n\r\n        const res = await Axios.put(\r\n            `https://jsonplaceholder.typicode.com/users/${id}`,\r\n            updContact\r\n        );\r\n\r\n        dispatch({ type: \"UPDATE_CONTACT\", payload: res.data });\r\n\r\n        this.setState({\r\n            name: \"\",\r\n            email: \"\",\r\n            phone: \"\",\r\n            errors: {},\r\n        });\r\n\r\n        this.props.history.push(\"/\");\r\n    };\r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n        return (\r\n            <Consumer>\r\n                {(value) => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">Edit Contact</div>\r\n                            <div className=\"card-body\">\r\n                                <form\r\n                                    onSubmit={this.onSubmit.bind(\r\n                                        this,\r\n                                        dispatch\r\n                                    )}\r\n                                >\r\n                                    <TextInputGroup\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        value={name}\r\n                                        placeholder=\"Enter name...\"\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        type=\"email\"\r\n                                        label=\"Email\"\r\n                                        name=\"email\"\r\n                                        value={email}\r\n                                        placeholder=\"Enter email...\"\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        className=\"form-control form-control-lg\"\r\n                                        value={phone}\r\n                                        placeholder=\"Enter phone...\"\r\n                                        onChange={this.onChange}\r\n                                        error={errors.phone}\r\n                                    />\r\n                                    <input\r\n                                        type=\"submit\"\r\n                                        value=\"Update Contact\"\r\n                                        className=\"btn btn-light btn-block\"\r\n                                    />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditContact;\r\n","import React from \"react\";\r\n\r\nexport default (props) => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">About Contact Manager</h1>\r\n            <p className=\"lead\">Contact Manager</p>\r\n            <p className=\"text-secondary\">Version 1.0.0</p>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">\r\n                <span className=\"text-danger\">404</span> Page not found.\r\n            </h1>\r\n            <p className=\"lead\">Sorry, that page doesn't exist.</p>\r\n        </div>\r\n    );\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nclass Test extends Component {\r\n    state = {\r\n        title: \"\",\r\n        body: \"\",\r\n    };\r\n\r\n    componentDidMount() {\r\n        console.log(\"component did mount\");\r\n        fetch(\"https://jsonplaceholder.typicode.com/posts/1\")\r\n            .then((response) => response.json())\r\n            .then((data) =>\r\n                this.setState({ title: data.title, body: data.body })\r\n            );\r\n    }\r\n\r\n    //deprecated\r\n    // componentWillMount() {\r\n    //     console.log(\"component will mount\");\r\n    // }\r\n\r\n    // componentDidUpdate() {\r\n    //     console.log(\"component update -- state changed\");\r\n    // }\r\n\r\n    // //deprecated\r\n    // componentWillUpdate() {\r\n    //     console.log(\"component will update\");\r\n    // }\r\n\r\n    // componentWillReceiveProps(nextProps, nextState) {\r\n    //     console.log(\"componentWillReceiveProps\");\r\n    // }\r\n\r\n    render() {\r\n        const { title, body } = this.state;\r\n        return (\r\n            <div>\r\n                <h1>{title}</h1>\r\n                <p>{body}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Test;\r\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Contacts from \"./components/contacts/Contacts\";\nimport Header from \"./components/layout/Header\";\nimport AddContact from \"./components/contacts/AddContact\";\nimport EditContact from \"./components/contacts/EditContact\";\n\nimport { Provider } from \"./context\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport About from \"./components/pages/About\";\nimport NotFound from \"./components/pages/NotFound\";\nimport Test from \"./components/test/Test\";\n\nfunction App() {\n    return (\n        <Provider>\n            <Router>\n                <div className=\"App\">\n                    <Header />\n                    <div className=\"container\">\n                        <Switch>\n                            <Route exact path=\"/\" component={Contacts} />\n                            <Route\n                                exact\n                                path=\"/contact/add\"\n                                component={AddContact}\n                            />\n                            <Route\n                                exact\n                                path=\"/contact/edit/:id\"\n                                component={EditContact}\n                            />\n                            <Route exact path=\"/about\" component={About} />\n                            <Route exact path=\"/test\" component={Test} />\n                            <Route component={NotFound} />\n                        </Switch>\n                    </div>\n                </div>\n            </Router>\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n// serviceWorker.register();\n"],"sourceRoot":""}